{"version":3,"sources":["../../src/util/findDOMNode.js"],"names":["findDOMNode","_findDOMNode","componentOrElement","node","fiberNode","_reactInternalFiber","stateNode","Element","child"],"mappings":"AAEA,SAAQA,eAAeC,YAAvB,QAA0C,WAA1C;;AAQA,IAAMD,cAAc,SAAdA,WAAc,CAClBE,kBADkB,EAEQ;AAC1B,MAAMC,OAAOF,aAAaC,kBAAb,CAAb;;AACA,MAAIC,IAAJ,EAAU,OAAOA,IAAP;AAEV,MAAIC,YACF;AACAF,wBAAuBA,kBAAD,CAA0BG,mBAFlD;;AAIA,SAAOD,aAAa,EAAEA,UAAUE,SAAV,YAA+BC,OAAjC,CAApB,EAA+D;AAC7DH,gBAAYA,UAAUI,KAAtB;AACD;;AAED,SAAOJ,YAAYA,UAAUE,SAAtB,GAAkC,IAAzC;AACD,CAfD;;AAiBA,eAAeN,WAAf","sourcesContent":["// @flow\n\nimport {findDOMNode as _findDOMNode} from 'react-dom';\nimport type {Component} from 'react';\n\ntype FiberNode = {\n  stateNode: null | Element | Text,\n  child: ?FiberNode,\n};\n\nconst findDOMNode = (\n  componentOrElement: Element | ?Component<*, *>,\n): null | Element | Text => {\n  const node = _findDOMNode(componentOrElement);\n  if (node) return node;\n\n  let fiberNode: ?FiberNode =\n    // flowlint-next-line unclear-type: off\n    componentOrElement && (componentOrElement: any)._reactInternalFiber;\n\n  while (fiberNode && !(fiberNode.stateNode instanceof Element)) {\n    fiberNode = fiberNode.child;\n  }\n\n  return fiberNode ? fiberNode.stateNode : null;\n};\n\nexport default findDOMNode;\n"],"file":"findDOMNode.js"}