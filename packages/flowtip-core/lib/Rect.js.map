{"version":3,"sources":["../src/Rect.js"],"names":["Rect","rect","left","top","width","height","a","b","rectA","from","rectB","Math","max","right","min","bottom","amount","undefined","Object","freeze"],"mappings":"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","sourcesContent":["// @flow\n\nexport type RectLike =\n  // eslint-disable-next-line no-use-before-define\n  | Rect\n  | ClientRect\n  | {\n      top: number,\n      left: number,\n      width: number,\n      height: number,\n      bottom?: number,\n      right?: number,\n    };\n\nclass Rect {\n  top: number;\n  left: number;\n  height: number;\n  width: number;\n  right: number;\n  bottom: number;\n\n  static zero: Rect = new Rect(0, 0, 0, 0);\n\n  /**\n   * Convert a rect-like object to a Rect instance. This is useful for\n   * converting non-serializable ClientRect instances to more standard objects.\n   *\n   * @param   {Object} rect A rect-like object.\n   * @returns {Object} A Rect instance.\n   */\n  static from(rect: RectLike): Rect {\n    if (rect instanceof Rect) return rect;\n    return new Rect(rect.left, rect.top, rect.width, rect.height);\n  }\n\n  /**\n   * Calculate the intersection of two rects.\n   *\n   * If there is a true geometric intersection, the returned rect will have a\n   * positive width and height.\n   *\n   * If the rects do not intersect in either axis, the returned dimension for\n   * that axis is negative and represents the distance between the rects.\n   *\n   * @param   {Object} a A rect-like object.\n   * @param   {Object} b A rect-like object.\n   * @returns {Object} A Rect instance.\n   */\n  static intersect(a: RectLike, b: RectLike): Rect {\n    const rectA = Rect.from(a);\n    const rectB = Rect.from(b);\n\n    const left = Math.max(rectA.left, rectB.left);\n    const right = Math.min(rectA.right, rectB.right);\n    const top = Math.max(rectA.top, rectB.top);\n    const bottom = Math.min(rectA.bottom, rectB.bottom);\n    const width = right - left;\n    const height = bottom - top;\n\n    return new Rect(left, top, width, height);\n  }\n\n  /**\n   * Expand (or shrink) the boundaries of a rect.\n   *\n   * @param   {Object} rect A rect-like object.\n   * @param   {number} amount Offset to apply to each boundary edge.\n   * @returns {Object} A Rect instance.\n   */\n  static grow(rect: RectLike, amount: number): Rect {\n    return new Rect(\n      rect.left - amount,\n      rect.top - amount,\n      rect.width + amount * 2,\n      rect.height + amount * 2,\n    );\n  }\n\n  /**\n   * Determine if two rect-like objects are equal.\n   *\n   * @param   {Object} [a] A rect-like object.\n   * @param   {Object} [b] A rect-like object.\n   * @returns {boolean} True if rects are equal.\n   */\n  static areEqual(a: ?RectLike, b: ?RectLike): boolean {\n    if (a === b) return true;\n\n    if ((a === null || a === undefined) && (b === null || b === undefined)) {\n      return true;\n    }\n\n    if (a === null || a === undefined || b === null || b === undefined) {\n      return false;\n    }\n\n    return (\n      a.left === b.left &&\n      a.top === b.top &&\n      a.width === b.width &&\n      a.height === b.height\n    );\n  }\n\n  /**\n   * Determine if a rect-like object has valid positive area.\n   *\n   * @param   {Object} [rect] A rect-like object.\n   * @returns {boolean} True if the rect has a positive area.\n   */\n  static isValid(rect: RectLike): boolean {\n    return rect.width >= 0 && rect.height >= 0;\n  }\n\n  constructor(left: number, top: number, width: number, height: number): void {\n    this.left = left;\n    this.top = top;\n    this.width = width;\n    this.height = height;\n    this.right = this.left + this.width;\n    this.bottom = this.top + this.height;\n\n    Object.freeze(this);\n  }\n}\n\nexport default Rect;\n"],"file":"Rect.js"}